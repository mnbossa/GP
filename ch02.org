#+TITLE:     GP - Rasmussen & Williams - Ch. 2: Regression
#+AUTHOR:
#+DATE:

#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+PROPERTY: header-args :eval never-export
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport

# #+startup: beamer
# #+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [presentation]
# #+LaTeX_CLASS_OPTIONS: [bigger]
# #+BEAMER_FRAME_LEVEL: 2
# #+BEAMER_THEME: Madrid
#+BEAMER_THEME: Boadilla
# +BEAMER_THEME: Berkeley
# +BEAMER_THEME: Copenhagen
#+PROPERTY: header-args :eval never-export

#+LaTeX_HEADER: \setminted[ipython]{frame=lines, fontsize=\tiny}
#+LaTeX_HEADER: \setminted[python]{frame=lines, fontsize=\tiny}
#+LaTeX_HEADER: \setminted[haskell]{frame=lines, fontsize=\tiny}

#+LaTeX_HEADER: \usefonttheme[onlymath]{serif}

# +latex_header: \AtBeginSection[]{\begin{frame}<beamer>\frametitle{Topic}\tableofcontents[currentsection]\end{frame}}


* Regression
** Sampling from prior
*** GP prior

\begin{eqnarray} \label{eg:GP}
k({x},{y}) & = & \mathrm{exp}( -\tfrac{1}{2}|{x}-{y}|^2) \\
\mathbf{f} & \sim & \mathcal{N}(\mathbf{0}, K(\mathbf{x}, \mathbf{x}))
\end{eqnarray}


*** Sampling from prior: Python code

#+INCLUDE: "./gp01.py" src ipython

#+BEGIN_SRC python :session :exports none
run gp01.py
name = 'images/fig01.png';
#+END_SRC

#+RESULTS:


#+BEGIN_SRC python :session :exports code
from matplotlib.pyplot import figure, plot, savefig, close, legend
from numpy import linspace

figure()
x = linspace(-5,5,150)
k = rbf(1)
for i in range(3): plot(x, genSamplesSimple(x,k));
#+END_SRC



*** Random functions in 1D


#+BEGIN_SRC python :session :exports results :results file
savefig(name); name
#+END_SRC

#+RESULTS:
[[file:images/fig01.png]]


*** Different length scales
**** :BMCOL:
   :PROPERTIES:
   :BEAMER_col: 0.45
   :END:


#+BEGIN_SRC python :session :exports none
close('all')
name = 'images/fig02.png'
#+END_SRC



#+BEGIN_SRC python :session :exports code
scales = [0.2, 1, 5]
for i in scales:
  plot(x, genSamplesSimple(x,rbf(i)))
legend(scales)
#+END_SRC


****                                                                  :BMCOL:
   :PROPERTIES:
   :BEAMER_col: 0.45
   :END:

#+BEGIN_SRC python :session :exports results :results file
savefig(name); name
#+END_SRC



#+RESULTS:
[[file:images/fig02.png]]

*** Two dimensions
**** :BMCOL:
   :PROPERTIES:
   :BEAMER_col: 0.4
   :END:


#+BEGIN_SRC python :session :exports none
from mpl_toolkits.mplot3d import axes3d
from matplotlib import cm
close('all')
name = 'images/fig03.png'
#+END_SRC


#+BEGIN_SRC python :session :exports code
from numpy import meshgrid, concatenate

x = linspace(5, -5, 50)
xx, yy = meshgrid(x, x)
xy = concatenate([xx.reshape([1, -1]),
                  yy.reshape([1, -1])]).T
z = genSamplesSimple(xy, rbf(2)).reshape([50, 50])
#+END_SRC


#+BEGIN_SRC python :session :exports code
fig = figure()
ax = fig.gca(projection='3d')
ax.plot_surface(xx, yy, z, rstride=8,
                cstride=8, alpha=0.3)
cset = ax.contour(xx, yy, z, zdir='z',
                  offset=-2.5, cmap=cm.coolwarm)
cset = ax.contour(xx, yy, z, zdir='x',
                  offset=-5, cmap=cm.coolwarm)
cset = ax.contour(xx, yy, z, zdir='y',
                  offset=5, cmap=cm.coolwarm)

ax.set_xlabel('X')
ax.set_xlim(-5, 5)
ax.set_ylabel('Y')
ax.set_ylim(-5, 5)
ax.set_zlabel('Z')
ax.set_zlim(-2.5, 2.5)
#+END_SRC



****                                                                  :BMCOL:
   :PROPERTIES:
   :BEAMER_col: 0.6
   :END:

#+BEGIN_SRC python :session :exports results :results file
savefig(name); name
#+END_SRC

#+RESULTS:
[[file:images/fig03.png]]



** Posterior
*** Computing posterior

\begin{eqnarray*}
\left[ \begin{array}{c} \mathbf{y} \\ \mathbf{f}_* \end{array} \right]
& \sim & \mathcal{N}\left( \mathbf{0},
\left[ \begin{array}{cc} K(X,X) + \sigma^2 I & K(X,X_*) \\
                         K(X_*,X)            & K(X_*,X_*) \end{array}
\right] \right) \\
\mathbf{f}_* | X, \mathbf{y}, X_* & \sim & \mathcal{N}(\overline{ \mathbf f}_*,
                                                       \mathrm{cov}(\mathbf f_* ))  \\
\overline{\mathbf f}_* & = & K(X_*,X) [K(X,X) + \sigma^2 I]^{-1}\mathbf y \\
& = & K(X_*,X) \mathbf \alpha \\
\mathrm{cov}(\mathbf f_*) & = & K(X_*,X_*) - K(X_*,X)  [K(X,X) + \sigma^2 I]^{-1} K(X,X_*) \\
 & = & K(X_*,K_*) - V^T V
\end{eqnarray*}

Where
\begin{eqnarray*}
L & = & \mathrm{chol}( K(X,X) + \sigma^2 I) \rightarrow  L L^T = K(X,X) + \sigma^2 I \\
\mathbf \alpha & = &  [K(X,X) + \sigma^2 I]^{-1}\mathbf y =
L^{-T} L^{-1} \mathbf y\\
V & = & L^{-1} K(X,X_*)
\end{eqnarray*}

*** Python code

#+INCLUDE: "./gp02.py" src ipython

#+BEGIN_SRC python :session :exports none
run gp02.py
name = 'images/fig04.png';
#+END_SRC

*** Fitting some data

**** :BMCOL:
   :PROPERTIES:
   :BEAMER_col: 0.35
   :END:

#+BEGIN_SRC python :session :exports code
from numpy import array, sqrt

X = linspace(-4, 4, 150)
k = rbf(1)
x = array([-2, 0, 0.1,   1, 3])
y = array([ 1, 0,   1, 0.6, 1])

f_m, V = compPosterior(y, x, rbf(1), X, 0.01)
s = sqrt(diag(V))

plot(X, f_m, 'r')
plot(X, f_m+2*s, 'r--')
plot(X, f_m-2*s, 'r--')
for i in range(5):
  plot(X, genSamples(X, f_m, V))
plot(x,y,'ob')
#+END_SRC


**** :BMCOL:
   :PROPERTIES:
   :BEAMER_col: 0.55
   :END:

#+BEGIN_SRC python :session :exports results :results file
savefig(name); name
#+END_SRC

#+RESULTS:
[[file:images/fig04.png]]
